# https://github.com/fraff/kraken-api
# https://support.kraken.com/hc/article_attachments/360077566151/krakenapi.py
# https://www.kraken.com/features/api

# FIXME: TradesHistory type=any%20position will returns an error because krakenapi.py will encode '%'

_kraken_api()
{
    local -A my_words my_time
    local method sub key val num unit tmp

    _init_completion -n = || return
    _expand || return 0

    # how many seconds is there in a week ? let's figure out here:
    my_time=([now]=0 [second]=1 [minute]=60 [hour]=3600 [day]=86400 [week]=604800 [month]=18144000)

    # these are all method and keyword accepted by kraken api
    # plus some value
    my_words=(
        # Public market data
        [Time]=""
        [Assets]="info aclass asset"
        [AssetPairs]="info pair"
        [sub_AssetPairs_info]="info leverage fees margin"
        [Ticker]="pair"
        [OHLC]="pair interval since"
        [sub_OHLC_interval]="1 5 15 30 60 240 1440 10080 21600"
        [Depth]="pair count"
        [Trades]="pair since"
        [Spread]="pair since"

        # Private user data
        [Balance]="aclass asset"
        [BalanceEx]=""
        [TradeBalance]="aclass asset"
        [OpenOrders]="trades userref"
        [ClosedOrders]="trades userref start end ofs closetime"
        [sub_ClosedOrders_closetime]="open close both"
        [QueryOrders]="trades userref txid"
        [TradesHistory]="type trades start end ofs"
        [sub_TradesHistory_type]="all any%20position closed%20position closing%20position no%20position"
        [QueryTrades]="txid trades"
        [OpenPositions]="txid Adocalcs consolidation"
        [Ledgers]="aclass asset type start end ofs"
        [sub_Ledgers_aclass]="currency"
        [sub_Ledgers_type]="all deposit withdrawal trade margin"
        [QueryLedgers]="id"
        [TradeVolume]="pair fee-info"
        [AddExport]=""
        [ExportStatus]=""
        [RetrieveExport]=""
        [RemoveExport]=""
        [GetWebSocketsToken]=""

        # Private user trading
        [AddOrder]="pair type ordertype price price2 volume leverage oflags starttm expiretm userref validate close[ordertype] close[price] close[price2]"
        [sub_AddOrder_type]="buy sell"
        [sub_AddOrder_ordertype]="market limit stop-loss take-profit stop-loss-limit take-profit-limit settle-position"
        [sub_AddOrder_close\[ordertype\]]="${my_words[sub_AddOrder_ordertype]}"
        [sub_AddOrder_oflags]="fcib fciq nompp post"
        [sub_AddOrder_starttm]="${!my_time[@]}"
        [sub_AddOrder_expiretm]="${my_words[sub_AddOrder_starttm]}"
        [CancelOrder]="txid"
        [CancelAll]=""
        [CancelAllOrdersAfter]="timeout"

        # Private user funding
        [DepositMethods]=""
        [DepositAddresses]=""
        [DepositStatus]=""
        [WithdrawInfo]=""
        [Withdraw]=""
        [WithdrawStatus]=""
        [WithdrawCancel]=""
        [WalletTransfer]=""
    )

    # how many work on command line
    if (( cword > 1 ))
    then
        method="${words[1]}"
        key="${cur%=*}"
        val=${cur#*=}
        sub="sub_${method}_${key}"

        # we already have keyword= so we are completing values
        if [[ "$cur" == *=* ]]
        then

            # in this special case, overwrite user input with output of date()
            if [[ "$method" == "AddOrder" ]] && [[ "$key" == "starttm" || "$key" == "expiretm" ]]
            then
                # get '3' and 'day' from starttm=3day or starttm=+3day
                num="${val//[![:digit:]]/}"
                unit="${val//[[:digit:]+]/}"

                # get possible completion of time unit and prefix by $num so '3d' becomes '3day'
                COMPREPLY+=( $(compgen -P "$num" -W '${!my_time[*]}' -- "$unit") )

                # once we got only one possible result, compute number of seconds from time unit
                # and remplace user input with it
                if (( ${#COMPREPLY[@]} == 1 ))
                then
                    unit="${COMPREPLY[0]#$num}"
                    num="${num:-1}"

                    COMPREPLY=( +$((${my_time[$unit]} * $num)) )
                fi

            # we're not in special case, just complete user input with sub_ keywords
            else
                COMPREPLY+=( $(compgen -W '${my_words[$sub]}' -- "${val}") )
            fi

        # we are completing keywords, no value yet
        # exclude sub_* and add final equal sign, no final space
        else
            compopt -o nospace
            COMPREPLY+=( $(compgen -W '${my_words[$method]}' -X 'sub_*' -S '=' -- "$cur") )
        fi

    # first keyword, complete with methods list and exclude sub_*
    # add final space
    else
        COMPREPLY+=( $(compgen -W '${!my_words[*]}' -X 'sub_*' -- "$cur") )
    fi


}
complete -F _kraken_api krakenapi.py

# ex: ts=4 sw=4 et filetype=sh
